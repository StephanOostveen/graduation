diff --git a/src/authentication/authentication_interface.h b/src/authentication/authentication_interface.h
index 7166572..f8eb4de 100644
--- a/src/authentication/authentication_interface.h
+++ b/src/authentication/authentication_interface.h
@@ -91,7 +91,7 @@ uint8_t authentication_interface_run(
     const auth_interface_output_t** auth_interface_out_p);
 
 #ifdef CEEDLING_UNIT_TEST
-void reset_vouchio_state();
+void reset_vouchio_state(void);
 #endif  // CEEDLING_UNIT_TEST
 
 #endif  // AUTHENTICATION_INTERFACE_H_
diff --git a/src/authentication/vouchio/pairing_handler.c b/src/authentication/vouchio/pairing_handler.c
index 57c5195..67b11f7 100644
--- a/src/authentication/vouchio/pairing_handler.c
+++ b/src/authentication/vouchio/pairing_handler.c
@@ -13,10 +13,10 @@
 /* Defines and Type definitions */
 
 /* Private Function Prototypes */
-static uint8_t load_nvm_vouchid();
+static uint8_t load_nvm_vouchid(void);
 static bool check_received_id(const uint8_t receiving_id[PAIRING_DATA_SIZE],
                               const uint8_t paired_id[PAIRING_DATA_SIZE]);
-static void check_connection_trust();
+static void check_connection_trust(void);
 
 // Displayables
 extern uint8_t aut_vouch_paired_status;
@@ -73,9 +73,9 @@ void trigger_unpairing(void) {
   check_connection_trust();
 }
 
-bool is_vouchio_trusted() { return trusted_connection_active; }
+bool is_vouchio_trusted(void) { return trusted_connection_active; }
 
-void check_connection_trust() {
+void check_connection_trust(void) {
   if ((is_trusted[I_AUTHENTICATION_FRONT_MODULE] == false) ||
       (is_trusted[I_AUTHENTICATION_REAR_MODULE] == false) ||
       (aut_vouch_paired_status != VOUCH_STATUS_PAIRED) ||
@@ -110,13 +110,13 @@ void connection_timeout(i_authentication_module_no_t module) {
   trusted_connection_active = false;
 }
 
-void received_alert() {
+void received_alert(void) {
   alert_activated = true;
   trusted_connection_active = false;
   alert_timeout_counter = 0;
 }
 
-void retrust_after_alert() {
+void retrust_after_alert(void) {
   if (alert_activated == true) {
     if (alert_timeout_counter >= RETRUST_TIMEOUT) {
       alert_activated = false;
@@ -127,13 +127,13 @@ void retrust_after_alert() {
   }
 }
 
-void retrieve_pairing() {
+void retrieve_pairing(void) {
   if (load_nvm_vouchid() == 0u) {
     aut_vouch_paired_status = VOUCH_STATUS_PAIRED;
   }
 }
 
-static uint8_t load_nvm_vouchid() {
+static uint8_t load_nvm_vouchid(void) {
   // #lizard forgives
   uint8_t read_ret = 1;
 
@@ -216,7 +216,7 @@ void store_vouch_identifier(
   }
 }
 
-void retrieve_vouch_identifier() {
+void retrieve_vouch_identifier(void) {
   uint8_t data_buffer[VOUCH_IDENTITY_DATA_SIZE] = {
       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
diff --git a/src/authentication/vouchio/pairing_handler.h b/src/authentication/vouchio/pairing_handler.h
index 937b84f..e832c9c 100644
--- a/src/authentication/vouchio/pairing_handler.h
+++ b/src/authentication/vouchio/pairing_handler.h
@@ -59,7 +59,7 @@ void trigger_unpairing(void);
 
   @return none
 */
-void retrieve_pairing();
+void retrieve_pairing(void);
 
 /**
   Refresh current Vouchio connected id
@@ -79,7 +79,7 @@ bool received_id(const uint8_t received_unique_id[],
 
   @return none
 */
-void unpair();
+void unpair(void);
 
 /**
   Communication timeout with the Vouchio device
@@ -100,7 +100,7 @@ void connection_timeout(i_authentication_module_no_t module);
 
   @return none
 */
-void received_alert();
+void received_alert(void);
 
 /**
   Retrust the lock/unlock door request after timeout of the alert
@@ -110,7 +110,7 @@ void received_alert();
 
   @return none
 */
-void retrust_after_alert();
+void retrust_after_alert(void);
 
 /**
   Current connection status with the Vouchio device
@@ -119,7 +119,7 @@ void retrust_after_alert();
 
   @return 1 if trusted, 0 otherwise
 */
-bool is_vouchio_trusted();
+bool is_vouchio_trusted(void);
 
 /**
   Stores Vouch identifier on non-volatile memory
diff --git a/src/authentication/vouchio/vouchio_authentication.c b/src/authentication/vouchio/vouchio_authentication.c
index a63ff7b..ed35484 100644
--- a/src/authentication/vouchio/vouchio_authentication.c
+++ b/src/authentication/vouchio/vouchio_authentication.c
@@ -210,7 +210,7 @@ static void send_app_enrollment_status_msg(i_pairing_state_t pair_state);
 
   @return None
 */
-static void read_app_vouch_identifier_msg();
+static void read_app_vouch_identifier_msg(void);
 
 /**
   Reads the initiate enrollment message from End of Line Application
@@ -468,7 +468,7 @@ uint8_t authentication_interface_run(
         enrollment_state = I_ENROLLMENT_STATE_IDLE;
       }
 
-      if ((pairing_state == I_PAIRING_STATE_ENROLLED)) {
+      if (pairing_state == I_PAIRING_STATE_ENROLLED) {
         trigger_pairing(vouch_unique_id_front, vouch_unique_id_rear);
         store_vouch_identifier(vouch_identifier_1, vouch_identifier_2);
         send_vouch_identifier_msg(vouch_identifier_1, vouch_identifier_2);
@@ -820,7 +820,7 @@ void send_app_enrollment_status_msg(i_pairing_state_t pair_state) {
 
   @return None
 */
-void read_app_vouch_identifier_msg() {
+void read_app_vouch_identifier_msg(void) {
   // Read the message for vouch identifier 1
   palcan_receive_return_t vouch_identifier_1_msg_read = palcan_receive(
       rx_app_vouch_identifier_1_msg_handle, app_vouch_identifier_1_msg_data,
@@ -1081,7 +1081,7 @@ void trigger_pairing_calibratable(void) {
 
 #ifdef CEEDLING_UNIT_TEST
 // cppcheck-suppress unusedFunction
-void reset_vouchio_state() {
+void reset_vouchio_state(void) {
   auth_interface_out.authentication_state = I_AUTHENTICATION_STATE_UNAUTHORIZED;
   auth_interface_out.closures_lock = I_IVI_CLOSURES_LOCK_INITIAL;
   aut_vouch_paired_status = VOUCH_STATUS_UNPAIRED;
diff --git a/src/charging/charging_authorizer.c b/src/charging/charging_authorizer.c
index fceabfa..21bd53c 100644
--- a/src/charging/charging_authorizer.c
+++ b/src/charging/charging_authorizer.c
@@ -113,7 +113,7 @@ static void disable_charging_2_state(charging_auth_input_t* charging_auth_in_p);
 
   @return None
 */
-static void fault_state_set();
+static void fault_state_set(void);
 
 /**
   Set actions for the unauthorized state
@@ -170,7 +170,7 @@ static void stop_charging2_state_set(void);
 static void disable_charging2_state_set(void);
 
 /* Public function definitions */
-void charging_auth_init() { unauthorized_state_set(); }
+void charging_auth_init(void) { unauthorized_state_set(); }
 
 uint8_t charging_auth_run(charging_auth_input_t* charging_auth_inp_p,
                           const charging_auth_output_t** charging_auth_outp_p) {
@@ -300,7 +300,7 @@ static void disable_charging_2_state(
   }
 }
 
-static void fault_state_set() {
+static void fault_state_set(void) {
   internal_charging_state = FAULT;
 
   charging_auth_output.charging_auth_state =
@@ -342,7 +342,7 @@ static void stop_charging2_state_set(void) {
   charging_auth_output.charge_action = I_CHARGE_ACTION_DISABLED;
 }
 
-static void disable_charging2_state_set() {
+static void disable_charging2_state_set(void) {
   internal_charging_state = DISABLE_CHARGING2;
 
   charging_auth_output.charge_action = I_CHARGE_ACTION_DISABLED;
