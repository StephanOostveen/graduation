# Let callgraph be the full callgraph generated by llvm
for component in weakly_connected_component(callgraph):
    for node in component.nodes():
        if any(substring in node.name for 
               substring in['palvar_read', 'palvar_write']):
            # subgraph components contains palvar_read 
            # or palvar_write node

            # create a graph containing only the ancestors of `node`
            ancestors = subgraph(component, ancestors(node))
            
            sorted_call_chain = ancestors.toplological_sort()
            # the first node in the chain contains the runnable's
            # function name
            runnable = sorted_call_chain.first()

            # the last node in the chain is the palvar_read_xxx_yyy 
            # or palvar_write_xxx_yyy function, extract the necessary
            # details using regex magic
            palvar = process_function_name(sorted_call_chain.last())
            print(runnable, palvar)
            